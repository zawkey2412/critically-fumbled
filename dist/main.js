const s="crit-fumble-tables-5e",m={boolean:[{key:"playersOnly",name:"Players Only",hint:"Only trigger tables for player-owned actors",default:!1},{key:"autoRollPlayers",name:"Auto-Roll for Players",hint:"Automatically roll tables for player rolls instead of showing a button",default:!1},{key:"autoRollNPCs",name:"Auto-Roll for NPCs",hint:"Automatically roll tables for NPC rolls instead of showing a button",default:!0},{key:"checkSaves",name:"Check Saving Throws",hint:"Also trigger on natural 1s and 20s for saving throws",default:!1},{key:"checkAbility",name:"Check Ability Checks",hint:"Also trigger on natural 1s and 20s for ability checks",default:!1},{key:"checkManualRolls",name:"Check Manual Rolls",hint:"Also trigger on min/max values for manual dice rolls (no character)",default:!1}],table:["meleeCrit","meleeFumble","rangedCrit","rangedFumble","spellCrit","spellFumble","saveCrit","saveFumble","abilityCrit","abilityFumble","manualCrit","manualFumble"]};async function M(e){if(e)try{const t=await fromUuid(e);ui.notifications[t?.name?"info":"warn"](t?.name?`Table found: ${t.name}`:"Invalid UUID")}catch{ui.notifications.error("Could not resolve UUID")}}function T(e){return e.replace(/([A-Z])/g," $1").replace(/^./,t=>t.toUpperCase()).replace(" Crit"," Critical").replace(" Fumble"," Fumble")+" Table UUID"}function U(){m.boolean.forEach(({key:e,name:t,hint:r,default:o})=>{game.settings.register(s,e,{name:t,hint:r,scope:"world",config:!0,type:Boolean,default:o})}),m.table.forEach(e=>{game.settings.register(s,e,{name:T(e),hint:`UUID of the RollTable for ${e.toLowerCase().replace(/crit|fumble/,t=>t==="crit"?"critical hits":"fumbles")}`,scope:"world",config:!0,type:String,default:"",onChange:M})})}const u=e=>game.settings.get(s,e),I={mwak:"melee",rwak:"ranged",msak:"spell",rsak:"spell"},F=["ability check","skill check","acrobatics","athletics","deception","history","insight","intimidation","investigation","medicine","nature","perception","performance","persuasion","religion","sleight","stealth","survival","arcana","animal handling"];function p(e){if(!e.rolls?.length)return null;const t=e.rolls[0],r=e.speaker?.actor?game.actors?.get(e.speaker.actor):null;if(r){const o=t.dice?.find(c=>c.faces===20);if(!o?.results?.length)return null;const n=b(o,t),a=n===20,i=n===1;if(!a&&!i)return null;const l=P(`${e.content||""} ${e.flavor||""}`);return l?{actor:r,category:l,isCrit:a,isFumble:i,naturalRoll:n,speaker:e.speaker}:null}else{if(!u("checkManualRolls"))return null;const o=t.dice?.[0];if(!o?.results?.length)return null;const n=b(o,t),a=n===o.faces,i=n===1;return!a&&!i?null:{actor:null,category:"manual",isCrit:a,isFumble:i,naturalRoll:n,speaker:e.speaker,dieInfo:{value:n,faces:o.faces}}}}function A(e,t){if(!e.actor)return!0;const r=Object.keys(e.actor.ownership||{}).filter(n=>{const a=game.users.find(i=>i.id===n);return e.actor.ownership[n]===3&&n!=="default"&&a&&!a.isGM}),o=r.find(n=>game.users.find(a=>a.id===n&&a.active));return r.length>0?r.includes(t)||!o&&game.user.isGM:game.user.isGM}function O(e,t){if(!e.actor)return!0;const r=Object.keys(e.actor.ownership||{}).filter(n=>{const a=game.users.find(i=>i.id===n);return e.actor.ownership[n]===3&&n!=="default"&&a&&!a.isGM}),o=game.users.find(n=>n.id===t);return r.includes(t)||o&&o.isGM}function b(e,t){if(e.results.length===1)return e.results[0].result;const r=e.results.map(o=>o.result);return t.options?.advantageMode===-1?Math.min(...r):Math.max(...r)}function P(e){const t=e.toLowerCase();return u("checkSaves")&&t.includes("saving throw")?"save":u("checkAbility")&&F.some(r=>t.includes(r))?"ability":null}function N(e){return I[e]||null}function S(e){return e&&(!u("playersOnly")||e.hasPlayerOwner)}const h={save:"saving throw",ability:"ability check",melee:"melee attack",ranged:"ranged attack",spell:"spell attack",manual:"manual roll"};function y(e){return{border:e?"#4CAF50":"#f72525ff",bg:e?"76,175,80":"255,107,107"}}function E(e){const t=e.speaker?.alias||"Someone";if(e.category==="manual"&&e.dieInfo)return`${t} rolled ${e.dieInfo.value} out of d${e.dieInfo.faces} on ${h.manual}!`;const r=e.category==="save"||e.category==="ability"?e.isCrit?"critically succeeded on":"critically failed":e.isCrit?"critically hit":"fumbled",o=e.category==="save"||e.category==="ability"?"":"with";return`${t} ${r} ${o} ${h[e.category]}!`.replace(/\s+/g," ")}function C(e,t,r){return`<div style="border: 2px solid ${t.border}; padding: 10px; margin: 5px; border-radius: 5px; background: rgba(${t.bg}, 0.1);">
    <h4 style="text-align: center; margin: 0 0 10px 0;">${e}</h4>
    <div id="crit-fumble-content">${r}</div>
  </div>`}function k(e,t,r,o){return`<div style="background: rgba(${r}, 0.1); padding: 10px; margin: 5px; border-radius: 5px;">
    <p style="text-align: center; margin: 5px 0;"><strong>Rolled</strong></p>
    <h4 style="text-align: center; margin: 5px 0; color: ${o?"#008000":"#FF0000"};"><strong>${e}</strong></h4>
    <p style="text-align: center; margin: 15px 0 5px 0;"><strong>Effect</strong></p>
    <div style="text-align: center; margin: 5px 0;">${t}</div>
  </div>`}function L(e,t,r){return`<div style="text-align: center;">
    <button class="crit-fumble-roll-btn" data-table-uuid="${e}" 
            style="display: block; padding: 8px 16px; margin: 5px auto; background: ${r}; 
                   color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: bold;">
      ðŸŽ² Roll ${t}
    </button>
  </div>`}async function $(e){const t=u(`${e.category}${e.isCrit?"Crit":"Fumble"}`);if(!t){console.warn(`[${s}] No table configured for ${e.category} ${e.isCrit?"crit":"fumble"}`);return}try{const r=await fromUuid(t);if(!r?.documentName||r.documentName!=="RollTable"){console.error(`[${s}] Invalid table UUID: ${t}`);return}const o=u(e.actor?.hasPlayerOwner?"autoRollPlayers":"autoRollNPCs"),n=y(e.isCrit),a=E(e);let i;if(o){const l=await r.roll(),c=l.results.map(d=>d.text||d.getChatText()).join(", "),f=l.total||l.roll?.total||0;i=k(f,c,n.bg,e.isCrit)}else i=L(t,r.name,n.border);await ChatMessage.create({content:C(a,n,i),speaker:e.speaker}),console.info(`[${s}] ${o?"Auto-rolled":"Created prompt for"} ${e.category} ${e.isCrit?"crit":"fumble"}`)}catch(r){console.error(`[${s}] Error processing roll:`,r)}}async function G(e){try{if(!e?.attackRoll&&!e?.item||!S(e.actor))return;const t=!!e.isCritical,r=!!e.isFumble;if(!t&&!r)return;const o=N(e.item?.system?.actionType||"mwak")||"melee";await $({actor:e.actor,category:o,isCrit:t,isFumble:r,naturalRoll:t?20:1,speaker:ChatMessage.getSpeaker({actor:e.actor})})}catch(t){console.error(`[${s}] Midi handler error:`,t)}}async function B(e){try{const t=p(e);if(!t||!A(t,game.user.id))return;const r=e.author?.id||e.user?.id||e.user;if(!t.actor&&r!==game.user.id)return;await $(t)}catch(t){console.error(`[${s}] Chat handler error:`,t)}}async function H(e,t,r,o){try{o&&await o.delete()}catch(g){console.warn(`[${s}] Failed to delete temp message:`,g)}const n=e.total;if(!n){ui.notifications.error("Roll failed to produce a result");return}const a=t.results.find(g=>{const[R,w]=g.range;return n>=R&&n<=w});if(!a){ui.notifications.error(`No table result found for roll: ${n}`);return}const l=r.closest(".message")?.dataset?.messageId,c=game.messages?.get(l);if(!c){ui.notifications.error("Could not find original message");return}const f=c.content.includes("critically succeeded")||c.content.includes("critically hit"),d=y(f),v=(c.content.match(/<h4[^>]*>([^<]+)<\/h4>/)?.[1]||"Roll Result").replace(/[<>"'&]/g,""),x=(a.text||a.getChatText()||"").toString();await c.update({content:C(v,d,k(n,x,d.bg,f))})}async function _(e,t){try{const r=new Roll(e.formula||"1d100");await r.evaluate(),t.disabled=!0,t.style.opacity="0.7",t.textContent="âœ“ Rolled!";const o=await r.toMessage();setTimeout(async()=>{try{await H(r,e,t,o)}catch(n){console.error(`[${s}] Error executing table roll:`,n),ui.notifications.error("Failed to process table result")}},2500)}catch(r){console.error(`[${s}] Error rolling table:`,r),ui.notifications.error("Failed to roll table")}}function j(){document.addEventListener("click",async e=>{const t=e.target;if(!t?.classList?.contains("crit-fumble-roll-btn"))return;const o=t.closest(".message")?.dataset?.messageId,n=game.messages?.get(o),a=p(n);if(a&&!O(a,game.user.id)){ui.notifications.warn(a.actor?"Only the character owner or GM can roll this table":"Permission denied");return}e.preventDefault(),e.stopPropagation();const i=t.dataset.tableUuid;if(!i){ui.notifications.error("No table UUID found on button");return}try{const l=await fromUuid(i);l?.documentName==="RollTable"?await _(l,t):ui.notifications.error("Invalid table or not a RollTable")}catch(l){console.error(`[${s}] Error with button click:`,l),ui.notifications.error("Failed to roll table")}})}Hooks.once("init",U);Hooks.once("ready",()=>{j(),Hooks.on("midi-qol.AttackRollComplete",G),Hooks.on("createChatMessage",B),console.info(`[${s}] Loaded`)});
